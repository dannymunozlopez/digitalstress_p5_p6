age_selfreport, age_official_confirm, grade_2021, startdate_formatted,
promis_dep1:promis_dep8, promis_anx1:promis_anx4, dss1:dss20),
p6_only %>% select(Peru3_4_5_6_ID, wave_ID, wave, session, exclude, group, gender, birthmth, birthyr,
age_selfreport, age_official_confirm, grade_2021, startdate_formatted,
promis_dep1:promis_dep8, promis_anx1:promis_anx4, dss1:dss20))
#Check new dataframe
head(p5_p6_adjusted)
#Sample size (should be N before splitting sample)
nrow(p5_p6_adjusted) #N = 1053
#Adjust data to long format
p5_p6_adjusted <- p5_p6_adjusted %>%
arrange(Peru3_4_5_6_ID, group)
#call careless package to remove repeated responses for DSS
#Note: chunk won't run without the careless library
library(careless)
#Create a new variable in the DF named careless, which is TRUE if participants have the same value in every column of the measure (DSS only) and FALSE if not to indicate repeated (careless) responses.
p5_p6_adjusted$careless <- ifelse(apply(p5_p6_adjusted[ ,(which(colnames (p5_p6_adjusted) == "dss1")):(which(colnames(p5_p6_adjusted)=="dss20"))], MARGIN=1, function(x) length(unique(as.numeric(x)))) == 1, TRUE, FALSE)
#For participants who reported the same response on items of the DSS measure, label as "NA." We decided not to exclude participants who reported the same response for each item of a sub-scale at this time because sub-scale items are interspersed throughout the DSS questionnaire.
p5_p6_adjusted <- p5_p6_adjusted %>%
mutate(
dss1 = ifelse(
careless == TRUE,
"NA", dss1),
dss2 = ifelse(
careless == TRUE,
"NA", dss2),
dss3 = ifelse(
careless == TRUE,
"NA", dss3),
dss4 = ifelse(
careless == TRUE,
"NA", dss4),
dss5 = ifelse(
careless == TRUE,
"NA", dss5),
dss7 = ifelse(
careless == TRUE,
"NA", dss7),
dss8 = ifelse(
careless == TRUE,
"NA", dss8),
dss9 = ifelse(
careless == TRUE,
"NA", dss9),
dss10 = ifelse(
careless == TRUE,
"NA", dss10),
dss11 = ifelse(
careless == TRUE,
"NA", dss11),
dss12 = ifelse(
careless == TRUE,
"NA", dss12),
dss13 = ifelse(
careless == TRUE,
"NA", dss13),
dss14 = ifelse(
careless == TRUE,
"NA", dss14),
dss15 = ifelse(
careless == TRUE,
"NA", dss15),
dss16 = ifelse(
careless == TRUE,
"NA", dss16),
dss17 = ifelse(
careless == TRUE,
"NA", dss17),
dss19 = ifelse(
careless == TRUE,
"NA", dss19),
dss20 = ifelse(
careless == TRUE,
"NA", dss20))
#Double check that the measures are still numeric. Previous runs of the code would change the object type, so this step is to make sure that does not happen.
##Make DSS numeric
p5_p6_adjusted <- p5_p6_adjusted%>%
mutate_at(vars(dss1:dss20), ~as.numeric(as.character(.)))
##Check
typeof(p5_p6_adjusted$dss1)
#Table summarizing results from the careless package
table(p5_p6_adjusted$careless) #Excluded 55 participants who had careless responses
#Keep participants who did not respond with the same answer repeatedly (i.e., FALSE careless)
p5_p6_adjusted <- p5_p6_adjusted %>%
filter(careless == FALSE)
#Check new sample size of DF that doesn't include people who had careless responses.
nrow(p5_p6_adjusted) #N = 998, dropped 55 participants with careless responses
#Check sample size before dropping NAs
#Check new sample size
nrow(p5_p6_adjusted) #N = 998
#Count number of NAs IN ANY MEASURE for each participant
p5_p6_adjusted_na_count <- p5_p6_adjusted %>%
mutate(
count_all_na = rowSums(is.na(select(.,one_of(c(
'dss1','dss2', 'dss3', 'dss4', 'dss5',
'dss7', 'dss8', 'dss9', 'dss10', 'dss11', 'dss12',
'dss13', 'dss14', 'dss15', 'dss16', 'dss17', 'dss19', 'dss20',
'promis_anx1', 'promis_anx2', 'promis_anx3', 'promis_anx4',
'promis_dep1', 'promis_dep2', 'promis_dep3', 'promis_dep4','promis_dep5', 'promis_dep6', 'promis_dep7', 'promis_dep8'))))))
#Keep only complete cases with filter. Drop people who had ANY NAs. RATIONALE: Given our large sample size, we are going to keep participants with COMPLETE CASES.
p5_p6_adjusted_no_na <- p5_p6_adjusted_na_count %>%
filter(count_all_na <= 0)
#Check new sample size
nrow(p5_p6_adjusted_no_na) #N = 973, dropped 25 due to NAs
p5_p6_availstress_score <- p5_p6_adjusted_no_na %>%
mutate(
avail_stress=rowMeans(select(., dss1, dss19, dss20))
)
#Range
range(p5_p6_availstress_score$avail_stress) #1-5
#Mean
mean(p5_p6_availstress_score$avail_stress) #2.0531
#SD
sd(p5_p6_availstress_score$avail_stress) #0.9025638
p5_p6_appanx_score <- p5_p6_availstress_score %>%
mutate(
approval_anx=rowMeans(select(., dss3, dss7, dss9, dss10))
)
#Range
range(p5_p6_appanx_score$approval_anx) #1-5
#Mean
mean(p5_p6_appanx_score$approval_anx) #2.032117
#SD
sd(p5_p6_appanx_score$approval_anx) #1.125912
p5_p6_fomo_score <- p5_p6_appanx_score %>%
mutate(
fomo=rowMeans(select(., dss4, dss5, dss14, dss15))
)
#Range
range(p5_p6_fomo_score$fomo) #1-5
#Mean
mean(p5_p6_fomo_score$fomo) #1.914954
#SD
sd(p5_p6_fomo_score$fomo) #0.9263101
p5_p6_overload_score <- p5_p6_fomo_score %>%
mutate(
connect_overload=rowMeans(select(., dss11, dss13, dss16))
)
#Range
range(p5_p6_overload_score$connect_overload) #1-5
#Mean
mean(p5_p6_overload_score$connect_overload) #1.913669
#SD
sd(p5_p6_overload_score$connect_overload) #0.8583178
p5_p6_vigilance_score <- p5_p6_overload_score %>%
mutate(
online_vigil=rowMeans(select(., dss2, dss8, dss12, dss17))
)
#Range
range(p5_p6_vigilance_score$online_vigil) #1-5
#Mean
mean(p5_p6_vigilance_score$online_vigil) #2.490236
#SD
sd(p5_p6_vigilance_score$online_vigil) #0.9763311
p5_p6_alldss_scored <- p5_p6_vigilance_score %>%
mutate(
dss_total_avg=rowMeans(select(., dss1, dss2, dss3, dss4, dss5, dss7, dss8, dss9, dss10,
dss11, dss12, dss13, dss14, dss15, dss16, dss17, dss19, dss20))
)
#Range
range(p5_p6_alldss_scored$dss_total_avg) #1.055556 4.833333
#Mean
mean(p5_p6_alldss_scored$dss_total_avg) #2.091641
#SD
sd(p5_p6_alldss_scored$dss_total_avg) #0.7585636
#Sum score
p5_p6_alldss_promisanx_scored <- p5_p6_alldss_scored %>%
mutate(
promis_anx_sum=rowSums(select(., promis_anx1:promis_anx4))
)
#Range
range(p5_p6_alldss_promisanx_scored$promis_anx_sum) #4-20
#Mean
mean(p5_p6_alldss_promisanx_scored$promis_anx_sum) #10.86536
#SD
sd(p5_p6_alldss_promisanx_scored$promis_anx_sum) #3.81347
#Recode scores according to T-Score table
p5_p6_alldss_promisanx_scored <- p5_p6_alldss_promisanx_scored %>%
mutate(promis_anx_tscore = recode(promis_anx_sum,
'4' = "40.3",
'5' = "48",
'6' = "51.2",
'7' = "53.7",
'8' = "55.8",
'9' = "57.7",
'10' = "59.5",
'11' = "61.4",
'12' = "63.4",
'13' = "65.3",
'14' = "67.3",
'15' = "69.3",
'16' = "71.2",
'17' = "73.3",
'18' = "75.4",
'19' = "77.9",
'20' = "81.6"))
#Make numeric
p5_p6_alldss_promisanx_scored <- p5_p6_alldss_promisanx_scored %>%
mutate_at(vars(promis_anx_tscore),~as.numeric(as.character(.)))
#Sum score
p5_p6_fully_scored <- p5_p6_alldss_promisanx_scored %>%
mutate(
promis_dep_sum=rowSums(select(., promis_dep1:promis_dep8))
)
#Range
range(p5_p6_fully_scored$promis_dep_sum) #8-40
#Mean
mean(p5_p6_fully_scored$promis_dep_sum) #20.42549
#SD
sd(p5_p6_fully_scored$promis_dep_sum) #8.362778
#Recode scores according to T-Score table
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate(promis_dep_tscore = recode(promis_dep_sum,
'8' = "35.2",
'9' = "40.4",
'10' = "43.2",
'11' = "45.5",
'12' = "47.4",
'13' = "49.1",
'14' = "50.6",
'15' = "52.0",
'16' = "53.3",
'17' = "54.5",
'18' = "55.7",
'19' = "56.8",
'20' = "57.9",
'21' = "59.0",
'22' = "60.0",
'23' = "61.1",
'24' = "62.1",
'25' = "63.1",
'26' = "64.1",
'27' = "65.1",
'28' = "66.1",
'29' = "67.2",
'30' = "68.2",
'31' = "69.3",
'32' = "70.3",
'33' = "71.4",
'34' = "72.6",
'35' = "73.8",
'36' = "75.1",
'37' = "76.5",
'38' = "78.1",
'39' = "79.9",
'40' = "82.4"))
#Make numeric
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate_at(vars(promis_dep_tscore),~as.numeric(as.character(.)))
#Make DSS specific data frame
dss_total <- p5_p6_fully_scored %>%
select(dss1, dss2, dss3, dss4, dss5, dss7, dss8, dss9, dss10,
dss11, dss12, dss13, dss14, dss15, dss16, dss17, dss19, dss20)
#Check Alpha
alpha(dss_total) #raw alpha = 0.9292514 = 0.93
#Make DSS - availability stress data frame
dss_avail_stress <- p5_p6_fully_scored %>%
select(dss1, dss19, dss20)
#check alpha
alpha(dss_avail_stress) #raw alpha = 0.841891 = 0.84
#make DSS - approval anxiety specific data frame
dss_approval_anx <- p5_p6_fully_scored %>%
select(dss3, dss7, dss9, dss10)
#check alpha
alpha(dss_approval_anx) #raw alpha = 0.945593 = 0.95
#make DSS - FOMO specific data frame
dss_fomo <- p5_p6_fully_scored %>%
select(dss4, dss5, dss14, dss15)
#check alpha
alpha(dss_fomo) #raw alpha = 0.8731212 = 0.87
#make Connection Overload specific data frame
dss_connect <- p5_p6_fully_scored %>%
select(dss11, dss13, dss16)
#check alpha
alpha(dss_connect) #raw alpha = 0.7646301 = 0.76
#make Online Vigilance specific data frame
dss_online <- p5_p6_fully_scored %>%
select(dss2, dss8, dss12, dss17)
#check alpha
alpha(dss_online) #raw alpha = 0.8340929 = 0.83
#make PROMIS Anxiety specific data frame
promis_anx_alpha <- p5_p6_fully_scored %>%
select(promis_anx1:promis_anx4)
#check alpha
alpha(promis_anx_alpha) #raw alpha = 0.7830833 = 0.78
#make PROMIS Depression specific data frame
promis_dep_alpha <- p5_p6_fully_scored %>%
select(promis_dep1:promis_dep8)
#check alpha
alpha(promis_dep_alpha) #raw alpha = 0.940782 = 0.94
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate(anx_clinical_status = ifelse(promis_anx_tscore > 59, "clinical", "non-clinical"))
#Number and % of people who are ranked clinically
anx_clinical_count <- sum(p5_p6_fully_scored$anx_clinical_status == "clinical")
# Calculate the percentage of "clinical" entries
anx_total_count <- nrow(p5_p6_fully_scored)
anx_clinical_percentage <- (anx_clinical_count / anx_total_count) * 100
# Print the results
print(paste("Number of clinical cases:", anx_clinical_count))
print(paste("Percentage of clinical cases:", round(anx_clinical_percentage, 2), "%"))
#Number and % of people who are ranked non-clinically
anx_nonclinical_count <- sum(p5_p6_fully_scored$anx_clinical_status == "non-clinical")
# Calculate the percentage of "non-clinical" entries
anx_total_count <- nrow(p5_p6_fully_scored)
anx_nonclinical_percentage <- (anx_nonclinical_count / anx_total_count) * 100
# Print the results
print(paste("Number of non-clinical cases:", anx_nonclinical_count))
print(paste("Percentage of non-clinical cases:", round(anx_nonclinical_percentage, 2), "%"))
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate(
anxiety_rank_p5 = ifelse(wave == "Peru 5", anx_clinical_status, NA),
anxiety_rank_p6 = ifelse(wave == "Peru 6", anx_clinical_status, NA)
)
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate(dep_clinical_status = ifelse(promis_dep_tscore > 53, "clinical", "non-clinical"))
#Number and % of people who are ranked clinically
dep_clinical_count <- sum(p5_p6_fully_scored$dep_clinical_status == "clinical")
# Calculate the percentage of "clinical" entries
dep_total_count <- nrow(p5_p6_fully_scored)
dep_clinical_percentage <- (dep_clinical_count / dep_total_count) * 100
# Print the results
print(paste("Number of clinical cases:", dep_clinical_count))
print(paste("Percentage of clinical cases:", round(dep_clinical_percentage, 2), "%"))
#Number and % of people who are ranked non-clinically
dep_nonclinical_count <- sum(p5_p6_fully_scored$dep_clinical_status == "non-clinical")
# Calculate the percentage of "non-clinical" entries
dep_total_count <- nrow(p5_p6_fully_scored)
dep_nonclinical_percentage <- (dep_nonclinical_count / dep_total_count) * 100
# Print the results
print(paste("Number of non-clinical cases:", dep_nonclinical_count))
print(paste("Percentage of non-clinical cases:", round(dep_nonclinical_percentage, 2), "%"))
p5_p6_fully_scored <- p5_p6_fully_scored %>%
mutate(
depression_rank_p5 = ifelse(wave == "Peru 5", dep_clinical_status, NA),
depression_rank_p6 = ifelse(wave == "Peru 6", dep_clinical_status, NA)
)
#Anxiety Peru 5
p5_p6_fully_scored <- p5_p6_fully_scored %>%
group_by(Peru3_4_5_6_ID) %>%
mutate(
anx_clinical_status_invariant_p5 = first(anxiety_rank_p5)
) %>%
ungroup()
#Depression Peru 5
p5_p6_fully_scored <- p5_p6_fully_scored %>%
group_by(Peru3_4_5_6_ID) %>%
mutate(
dep_clinical_status_invariant_p5 = first(depression_rank_p5)
) %>%
ungroup()
#Total sample size
nrow(p5_p6_fully_scored) #N = 973
#Peru 5 sample size
nrow(p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 5', ]) #N Peru 5 = 496
#Peru 6 sample size
nrow(p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 6', ]) #N Peru 6 = 477
total_n <- nrow(p5_p6_fully_scored)
total_n #N = 973
sex_counts <- table(p5_p6_fully_scored$gender)
sex_counts #F = 625, M = 348
sex_percentage <- (sex_counts / total_n) * 100
sex_percentage #Female = 64.23433 = 64.2%
total_n_p5 <- nrow(p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 5', ])
total_n_p5 #N = 496
sex_counts_p5 <- table((p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 5', ])$gender)
sex_counts_p5 #F = 306, M = 190
sex_percentage_p5 <- (sex_counts_p5 / total_n_p5) * 100
sex_percentage_p5 #Female = 61.69355 = 61.7%
total_n_p6 <- nrow(p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 6', ])
total_n_p6 #N = 477
sex_counts_p6 <- table((p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 6', ])$gender)
sex_counts_p6 #F = 319, M = 158
sex_percentage_p6 <- (sex_counts_p6 / total_n_p6) * 100
sex_percentage_p6 #Female = 66.87631 = 66.9%
#Range age
range(p5_p6_fully_scored$age_official_confirm) #11-17
#Mean age
mean(p5_p6_fully_scored$age_official_confirm) #12.88386
#SD age
sd(p5_p6_fully_scored$age_official_confirm) #1.538222
#Range grade
range(p5_p6_fully_scored$grade_2021) #6-11
#Mean grade
mean(p5_p6_fully_scored$grade_2021) #7.640288
#SD grade
sd(p5_p6_fully_scored$grade_2021) #1.49557
p5_data <- p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 5', ]
#Range age
range(p5_data$age_official_confirm) #11-17
#Mean age
mean(p5_data$age_official_confirm) #12.64113
#SD age
sd(p5_data$age_official_confirm) #1.501596
#Range grade
range(p5_data$grade_2021) #6-11
#Mean grade
mean(p5_data$grade_2021) #7.627016
#SD grade
sd(p5_data$grade_2021) #1.489355
#Range
range(p5_data$dss_total_avg) #1.055556 - 4.833333
#Mean
mean(p5_data$dss_total_avg) #2.12108
#SD
sd(p5_data$dss_total_avg) #0.7499721
#Range
range(p5_data$avail_stress) #1 - 5
#Mean
mean(p5_data$avail_stress) #2.188172
#SD
sd(p5_data$avail_stress) #0.91844
#Range
range(p5_data$approval_anx) #1 - 5
#Mean
mean(p5_data$approval_anx) #1.998992
#SD
sd(p5_data$approval_anx) #1.1126
#Range
range(p5_data$connect_overload) #1 - 5
#Mean
mean(p5_data$connect_overload) #1.936828
#SD
sd(p5_data$connect_overload) #0.8682174
#Range
range(p5_data$fomo) #1 - 5
#Mean
mean(p5_data$fomo) #1.890625
#SD
sd(p5_data$fomo) #0.9355535
#Range
range(p5_data$online_vigil) #1 - 5
#Mean
mean(p5_data$online_vigil) #2.561492
#SD
sd(p5_data$online_vigil) #0.9562389
#Range
range(p5_data$promis_anx_sum) #4 - 20
#Mean
mean(p5_data$promis_anx_sum) #10.66331
#SD
sd(p5_data$promis_anx_sum) #3.580185
#Range
range(p5_data$promis_dep_sum) #8 - 40
#Mean
mean(p5_data$promis_dep_sum) #19.80847
#SD
sd(p5_data$promis_dep_sum) #8.113439
p6_data <- p5_p6_fully_scored[p5_p6_fully_scored$wave == 'Peru 6', ]
#Range age
range(p6_data$age_official_confirm) #11-17
#Mean age
mean(p6_data$age_official_confirm) #13.13627
#SD age
sd(p6_data$age_official_confirm) #1.536764
#Range grade
range(p6_data$grade_2021) #6-11
#Mean grade
mean(p6_data$grade_2021) #7.654088
#SD grade
sd(p6_data$grade_2021) #1.503445
#Range
range(p6_data$dss_total_avg) #1.055556 - 4.777778
#Mean
mean(p6_data$dss_total_avg) #2.06103
#SD
sd(p6_data$dss_total_avg) #0.7669835
#Range
range(p6_data$avail_stress) #1 - 5
#Mean
mean(p6_data$avail_stress) #1.912648
#SD
sd(p6_data$avail_stress) #0.8645745
#Range
range(p6_data$approval_anx) #1 - 5
#Mean
mean(p6_data$approval_anx) #2.066562
#SD
sd(p6_data$approval_anx) #1.139737
#Range
range(p6_data$connect_overload) #1 - 5
#Mean
mean(p6_data$connect_overload) #1.889588
#SD
sd(p6_data$connect_overload) #0.8481408
#Range
range(p6_data$fomo) #1 - 5
#Mean
mean(p6_data$fomo) #1.940252
#SD
sd(p6_data$fomo) #0.9168958
#Range
range(p6_data$online_vigil) #1 - 5
#Mean
mean(p6_data$online_vigil) #2.416143
#SD
sd(p6_data$online_vigil) #0.9923771
#Range
range(p6_data$promis_anx_sum) #4 - 20
#Mean
mean(p6_data$promis_anx_sum) #11.07547
#SD
sd(p6_data$promis_anx_sum) #4.034849
#Range
range(p6_data$promis_dep_sum) #8 - 40
#Mean age
mean(p6_data$promis_dep_sum) #21.06709
#SD age
sd(p6_data$promis_dep_sum) #8.575891
proj_data_dir = here() #Stay in the "digitalstress_p5_p6" folder
project_data_folder <- file.path(proj_data_dir, "data") #Path to the data folder for this project
write.csv(p5_p6_fully_scored, here(project_data_folder, "p5_p6_dss_promis_fully_scored.csv"), row.names= FALSE)
git config pull.rebase false  # merge
